# This workflow will build and (if release) publish Python distributions to PyPI
# For more information see:
#   - https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
#   - https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
#   - Adapted from https://github.com/Farama-Foundation/PettingZoo/blob/e230f4d80a5df3baf9bd905149f6d4e8ce22be31/.github/workflows/build-publish.yml

name: build-publish

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt update
          sudo apt-get install -y build-essential cmake freeglut3-dev libzip-dev

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install packages
        run: |
          python -m pip install -U pip
          pip install -U build setuptools virtualenv wheel

      - name: Build wheels
        run: python -m build -sw

      - name: Store wheels
        uses: actions/upload-artifact@v3
        with:
          name: Linux Python ${{ matrix.python-version }}
          path: dist

  build-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10']
        msystem: ['UCRT64', 'MINGW64']
        include:
          - python-version: '3.9'
            branch: 'mingw-v3.9.13'
          - python-version: '3.10'
            branch: 'mingw-v3.10.12'
          - msystem: UCRT64
            prefix: mingw-w64-ucrt-x86_64
          - msystem: MINGW64
            prefix: mingw-w64-x86_64

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            autoconf-archive
            git
            ${{ matrix.prefix }}-autotools
            ${{ matrix.prefix }}-cmake
            ${{ matrix.prefix }}-freeglut
            ${{ matrix.prefix }}-gcc
            ${{ matrix.prefix }}-libffi
            ${{ matrix.prefix }}-libzip
            ${{ matrix.prefix }}-make
            ${{ matrix.prefix }}-mpdecimal
            ${{ matrix.prefix }}-ncurses
            ${{ matrix.prefix }}-openblas
            ${{ matrix.prefix }}-sqlite3
            ${{ matrix.prefix }}-tcl
            ${{ matrix.prefix }}-tk
            ${{ matrix.prefix }}-tzdata

      - name: Set up Python ${{ matrix.python-version }}
        run: |
          git clone -b ${{ matrix.branch }} https://github.com/msys2-contrib/cpython-mingw
          cd cpython-mingw
          autoreconf -fi
          ./configure \
            --enable-shared \
            --enable-optimizations \
            --with-ensurepip=no \
            --with-system-expat \
            --with-system-ffi \
            --with-system-libmpdec \
            --with-tzpath=${MINGW_PREFIX}/share/zoneinfo
          make -j$(nproc)
          make install DESTDIR=tmp
          cp -rf tmp/* /
          python3 -m ensurepip

      - name: Clean up
        run: |
          rm -rf cpython-mingw

      - name: Install packages
        run: |
          export SETUPTOOLS_USE_DISTUTILS=stdlib
          python3 -m pip install -U pip
          pip install -U build setuptools virtualenv wheel

      - name: Build wheels
        run: python3 -m build -sw

      - name: Store wheels
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.msystem }} Python ${{ matrix.python-version }}
          path: dist

  display:
    runs-on: ubuntu-latest

    needs: [build-linux, build-windows]

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          path: tmp

      - name: Pack wheels together
        run: |
          mkdir dist
          cp tmp/**/* dist

      - name: Display wheels
        run: ls dist

  publish:
    runs-on: ubuntu-latest

    needs: [build-linux, build-windows]

    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          path: tmp

      - name: Pack wheels together
        run: |
          mkdir dist
          cp tmp/**/* dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
